1. Хочешь, чтобы линии бургер меню превращались в крестик при открытии? Сделай их из svg, а потом заанимируй, поменяв положение верхней и нижней.
<svg width="23" height="23" viewBox="0 0 23 23">
        <motion.path
          strokeWidth="3"
          stroke="black"
          strokeLinecap="round"
          variants={{
            closed: { d: "M 2 2.5 L 20 2.5" },
            open: { d: "M 3 16.5 L 17 2.5" },
          }}
        />
        <motion.path strokeWidth="3" stroke="black" strokeLinecap="round" d='M 2 9.423 L 20 9.423'/>
        <motion.path
          strokeWidth="3"
          stroke="black"
          strokeLinecap="round"
          variants={{
            closed: { d: "M 2 2.5 L 20 2.5" },
            open: { d: "M 3 16.5 L 17 2.5" },
          }}
        />
      </svg>


2. Как сделать так, чтобы ссылки меню при открытии выпадали по череди,а при закрытии "захлапывались" обратно так же по очереди?
const variants = {
  open: {
    transition:{
      staggerChildren:0.1
    }
  },
  closed: {
    transition:{
      staggerChildren:0.05,
      staggerDirection: -1,
    }
  }
}
Еще доп анимация на сами ссылки была
onst itemVariants = {
  open: {
    y:0,
    opacity: 1,
  },
  closed: {
    y:50,
    opacity: 0,
  }
}


3. Не обязательно добавлять initial, м и только animate.
4. Если хочешь бесконечную анимацию просто
scrollButton: {
    opacity: 0,
    y: 10,
    transition: {
        duration: 2,
        repeat: Infinity,
    }
  }


5. Как сделать бегущую строку?
const sliderVariants = {
  initial: {
    x: 0,
  },
  animate: {
    x: '-220%',
    transition: {
        repeat: Infinity,
        repeatType: 'mirror',
        duration: 20,
    }
  },
};

6. Чтобы возвращалось обратно
repeatType: 'mirror',




7. Анимация параллакса. не забудь еще overflow:hidden на блок добавить общий
Суть такова: создаешь ref, в него помещаешь весь блок, где параллакс. Пов offset настраиваешь направление скролла. ну типа. Потом юзаешь useTransform - в нем уже конкретные анимации. Там соотносится [0, 1] и ["0%", "500%"]. 0=0%. 1=500%. Ты понояла.Потом эти переменные, в которых useTransform, помещаешь в стили, вот прям в style у элементов, где нужна анимация.

import { motion, useScroll, useTransform } from "framer-motion";

function Parallax({ type }) {
  const ref = useRef();
  const [scrollYProgress] = useScroll({
    target: ref,
    offset: ["start start", "end start"],
  });

  const yText = useTransform(scrollYProgress, [0, 1], ["0%", "500%"]);
  const yBg = useTransform(scrollYProgress, [0, 1], ["0%", "100%"]);
  return (
    <div
      className="parallax"
      ref={ref}
      style={{
        background:
          type === "services"
            ? "linear-gradient(180deg, #111132, #0c0c1d)"
            : "linear-gradient(180deg, #111132, #505064)",
      }}
    >
      <motion.h1 style={{ y: yText }}>
        {type === "services" ? "What We do?" : "What We Did"}
      </motion.h1>
      <motion.div className="mountains"></motion.div>
      <motion.div
        className="planets"
        style={{
          y: yBg,
          // bg потому что у нас 2 параллакса, где разница ток в картинке
          backgroundImage: `url(${
            type === "services" ? "/planets.png" : "/sun.png"
          })`,
        }}
      ></motion.div>
      <motion.div style={{ x: yBg }} className="start"></motion.div>
    </div>
  );
}


8. Нужна анимация при скролле? Есть 2 варианта, первый variants и whileInView на компоненте. Второй вариант - variants и хук useInView. Тогда вот так
const ref = useRef();
  const isInView = useInView(ref, { margin: "-100px" });
  return (
    <motion.div
      className="services"
      variants={variants}
      initial="initial"
      // whileInView='animate'
      ref={ref}
      animate={isInView && 'animate'}
    >


9. Хочешь прогрессбар?
Не забудь импортнуть хуки и motion
useSping это useTransition типа, нно сразу со useSpring
1. ref на элементов
2. переменная из useScroll
3. Переменная из useSpring, которую запихнешь в style компонента
const Portfolio = () => {
    const ref = useRef()
    const {scrollYProgress} = useScroll({target:ref, offset:['end end', 'start start']})
    const scaleX = useSpring(scrollYProgress, {
        stiffness: 100,
        damping: 30, -----как я пон, это шаг
    })
  return <div className="portfolio" ref={ref}> ------position: relative
    <div className="progress"> ----------------------position: sticky
        <h1>Featured Works</h1>
        <motion.div className="progressBar" style={{scaleX}}></motion.div>
    </div>